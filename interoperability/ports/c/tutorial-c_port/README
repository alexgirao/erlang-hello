- http://localhost/erlang/doc/doc/tutorial/c_port.html#4

4.3 Running the Example

1. Compile the C code.

    unix> gcc -o extprg complex.c erl_comm.c port.c

2. Start Erlang and compile the Erlang code.

    unix> erl
    Erlang (BEAM) emulator version 4.9.1.2

    Eshell V4.9.1.2 (abort with ^G)
    1> c(complex1).
    {ok,complex1}

3. Run the example.

    2> complex1:start("extprg").

       or

    2> complex1:start(begin {ok, Dir} = file:get_cwd(), Dir ++ "/extprg" end).
    <0.34.0>
    3> complex1:foo(3).
    4
    4> complex1:bar(5).
    10
    5> complex1:stop().
    stop

4. Calling port directly.

    1> Port = open_port({spawn, begin {ok, Dir} = file:get_cwd(), Dir ++ "/extprg" end}, [{packet, 2}]). 
    #Port<0.424>
    2> flush().
    ok
    3> Port ! {self(), {command, [1, 3]}}.
    {<0.33.0>,{command,[1,3]}}
    4> flush().
    Shell got {#Port<0.424>,{data,[4]}}
    ok
    5> Port ! {self(), {command, [1, 3]}}.
    {<0.33.0>,{command,[1,3]}}
    6> Port ! {self(), {command, [2, 5]}}.  
    {<0.33.0>,{command,[2,5]}}
    7> flush().
    Shell got {#Port<0.424>,{data,[4]}}
    Shell got {#Port<0.424>,{data,"\n"}}
    ok

5. Calling port directly with binary data instead of list of bytes.

    1> Port = open_port({spawn, begin {ok, Dir} = file:get_cwd(), Dir ++ "/extprg" end}, [{packet, 2}, binary]).
    #Port<0.424>
    2> flush().
    ok
    3> Port ! {self(), {command, <<1,3>>}}.
    {<0.33.0>,{command,<<1,3>>}}
    4> flush().
    Shell got {#Port<0.424>,{data,<<4>>}}
    ok

6. using BIF port_command.

    1> Port = open_port({spawn, begin {ok, Dir} = file:get_cwd(), Dir ++ "/extprg" end}, [{packet, 2}, binary]).
    #Port<0.424>
    2> port_command(Port, <<1,3>>).
    true
    3> flush().
    Shell got {#Port<0.424>,{data,<<4>>}}
    ok
